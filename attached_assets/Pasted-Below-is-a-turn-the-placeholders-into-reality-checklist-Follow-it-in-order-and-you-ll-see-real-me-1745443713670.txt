Below is a ‚Äúturn-the-placeholders-into-reality‚Äù checklist.
Follow it in order and you‚Äôll see real members of Congress, real money, and real trades populate the UI instead of the mock cards you hard-coded for design work.

1 Ô∏è‚É£ Finish the initial full ingest
a. Run each pipeline once in ‚Äúfull-refresh‚Äù mode
(You already coded the flag in each script.)

bash
Copy
Edit
# inside Replit shell
python backend/fec_pipeline.py  --full
python backend/congress_pipeline.py  --full
python backend/stock_pipeline.py  --full
Watch pipeline_runs ‚Üí rows_ingested climb into the tens-/hundreds-of-thousands.

b. Verify ‚Äúpoliticians‚Äù table has real records
sql
Copy
Edit
SELECT id, first_name, party, state, bioguide_id
FROM politicians
ORDER BY id
LIMIT 5;
If it‚Äôs empty you probably haven‚Äôt synced the Congress-member XML into Politicians yet
‚Üí rerun congress_pipeline.py --full and look for the ‚Äúüíæ Members synced‚Äù log line.

2 Ô∏è‚É£ Link every dataset to the same person
Add this to backend/models.py:

python
Copy
Edit
class PoliticianAlias(Base):
    __tablename__ = "politician_aliases"
    id = Column(Integer, primary_key=True)
    politician_id = Column(Integer, ForeignKey("politicians.id"))
    source = Column(String)          # 'bioguide' / 'fec' / 'house_fd'
    external_id = Column(String)
During each pipeline insert:

python
Copy
Edit
def upsert_alias(session, politician_id, source, ext_id):
    if not session.query(PoliticianAlias).filter_by(
            source=source, external_id=ext_id).first():
        session.add(PoliticianAlias(
            politician_id=politician_id, source=source, external_id=ext_id))
That makes joining stock trades (House FD ext ID), FEC contributions, and votes trivial.

3 Ô∏è‚É£ Fill the photo URL (nice bonus)
python
Copy
Edit
pol.photo_url = f"https://www.congress.gov/img/member/{pol.bioguide_id.lower()}.jpg"
Many member images are already served at that predictable path.

4 Ô∏è‚É£ Expose a real list endpoint (no mocks)
Add to api.py:

python
Copy
Edit
@app.get("/politicians")
def list_politicians(limit:int = 50, offset:int = 0):
    rows = (
      db.query(Politician)
        .order_by(Politician.last_name)
        .offset(offset).limit(limit).all()
    )
    return [p.as_dict() for p in rows]
(Remove or comment-out any temporary /demo-politicians route.)

5 Ô∏è‚É£ Swap the React mock data for live fetch
frontend/src/pages/Politicians.tsx

tsx
Copy
Edit
const { data, isLoading } = useQuery({
  queryKey: ['politicians'],
  queryFn: () => api.get('/politicians?limit=60').then(r => r.data),
});

if (isLoading) return <Spinner/>;

return (
  <div className="grid md:grid-cols-3 gap-6">
    {data.map((p: Politician) => (
       <Card key={p.id}>
         <img src={p.photo_url} className="h-16 w-16 rounded-full"/>
         <h3>{p.first_name} {p.last_name}</h3>
         <p>{p.party} ‚Äì {p.state}</p>
         <p className="text-sm text-gray-500">
           Contributions ${p.contribution_total_millions}M ‚Ä¢
           Trades {p.trade_count}
         </p>
         <Link to={`/politicians/${p.id}`} className="btn mt-2">
             View Money Timeline
         </Link>
       </Card>
    ))}
  </div>
);
Delete the static Jane Smith / John Davis / Mary Wilson JSON you used for design.

6 Ô∏è‚É£ Money-timeline actually loads
Your detail page already hits /politicians/{id}/timeline.
Once the ingest and alias steps above run, the query will return rows and the ‚ÄúNo timeline data‚Äù placeholder disappears.

If you still see ‚Äú0 items‚Äù:

Confirm the politician‚Äôs id in the URL matches the politician_id in votes, contributions, stock_trades.

Check FastAPI logs for "JOIN condition" warnings ‚Üí usually means alias missing.

7 Ô∏è‚É£ Seed script (optional but handy)
Place in backend/seed.py:

python
Copy
Edit
from backend import fec_pipeline, congress_pipeline, stock_pipeline
for pipe in (congress_pipeline.run_full,
             fec_pipeline.run_full,
             stock_pipeline.run_full):
    pipe()
Run once after a fresh DB so you‚Äôre never tempted to re-add fake cards again.

